{"version":3,"sources":["components/GameButton/index.jsx","components/Header/index.jsx","components/Score/index.jsx","components/GameScene/index.jsx","sections/Scene/index.jsx","App.js","serviceWorker.js","index.js"],"names":["GameButton","children","className","id","onClick","Header","Score","score1","score2","GameScene","card","botCard","counter","setBotCardF","clearAll","disabled","Scene","useState","setCard","setBotCard","roundNum","setRoundNum","playerScore","setPlayerScore","botScore","setBotScore","setCounter","message","setMessage","cards","useEffect","setTimeout","setWinner","pickedCard","Math","floor","random","event","currentTarget","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.72932f5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst GameButton = ({ children, className, id, onClick }) => {\r\n  return (\r\n    <>\r\n      <div onClick={onClick} id={id} className=\"button-container\">\r\n        <div className={\"image \" + className}></div>\r\n        <div className=\"description\">\r\n          <p>{children}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameButton;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <header className=\"header-container\">\r\n        <h1 className=\"header-text\">Rock Paper Scissors</h1>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./score.css\";\r\n\r\nconst Score = ({ score1, score2 }) => {\r\n  return (\r\n    <>\r\n      <div className=\"score-container\">\r\n        <div className=\"boxes\">\r\n          <div className=\"box score-box right\">\r\n            <p>{score1}</p>\r\n          </div>\r\n          <div className=\"box score-box left\">\r\n            <p>{score2}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport { GameButton } from \"..\";\r\nimport \"./gamescene.css\";\r\n\r\nconst GameScene = ({\r\n  card,\r\n  botCard,\r\n  onClick,\r\n  counter,\r\n  setBotCardF,\r\n  clearAll,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"game-scene-container\">\r\n        <div className=\"boxes\">\r\n          <div className=\"box game-box player1box\">\r\n            <div id=\"player\" className=\"display-card\">\r\n              <div className={\"image \" + card}></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div id=\"bot\" className=\"box game-box player2box\">\r\n            <div className={\"image \" + botCard}></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"set-clear-buttons\">\r\n        <button\r\n          className=\"box set-button\"\r\n          disabled={counter === 0 ? true : false}\r\n          onClick={setBotCardF}\r\n        >\r\n          Set\r\n        </button>\r\n        <button className=\"box set-button\" onClick={clearAll}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"buttons-container\">\r\n        <GameButton onClick={onClick} id=\"rock\" className=\"rock\">\r\n          Rock\r\n        </GameButton>\r\n        <GameButton onClick={onClick} id=\"paper\" className=\"paper\">\r\n          Paper\r\n        </GameButton>\r\n        <GameButton onClick={onClick} id=\"scissors\" className=\"scissors\">\r\n          Scissors\r\n        </GameButton>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameScene;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Score } from \"../../components\";\r\nimport GameScene from \"../../components/GameScene\";\r\n\r\nconst Scene = () => {\r\n  const [card, setCard] = useState(\"\");\r\n  const [botCard, setBotCard] = useState(\"\");\r\n\r\n  const [roundNum, setRoundNum] = useState(1);\r\n\r\n  const [playerScore, setPlayerScore] = useState(0);\r\n  const [botScore, setBotScore] = useState(0);\r\n\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const [message, setMessage] = useState(\"Set your icon\");\r\n\r\n  const onClick = (event) => {\r\n    if (counter === 0 || card !== event.currentTarget.id) {\r\n      setCard(event.currentTarget.id);\r\n      setCounter(1);\r\n    } else {\r\n      setCard(\"\");\r\n      setCounter(0);\r\n    }\r\n  };\r\n\r\n  const clearAll = () => {\r\n    setPlayerScore(0);\r\n    setBotScore(0);\r\n    setCard(\"\");\r\n    setBotCard(\"\");\r\n    setCounter(0);\r\n    setRoundNum(1);\r\n    setMessage(\"Set your icon\");\r\n  };\r\n\r\n  const setWinner = (card, botCard) => {\r\n    if (\r\n      (card && botCard && card === \"rock\" && botCard === \"paper\") ||\r\n      (card === \"paper\" && botCard === \"scissors\") ||\r\n      (card === \"scissors\" && botCard === \"rock\")\r\n    ) {\r\n      setBotScore(botScore + 1);\r\n      setCard(\"\");\r\n      setBotCard(\"\");\r\n      setCounter(0);\r\n      setRoundNum(roundNum + 1);\r\n      setMessage(\"Bot won round \" + roundNum);\r\n    } else if (\r\n      (card === \"paper\" && botCard === \"rock\") ||\r\n      (card === \"scissors\" && botCard === \"paper\") ||\r\n      (card === \"rock\" && botCard === \"scissors\")\r\n    ) {\r\n      setPlayerScore(playerScore + 1);\r\n      setCard(\"\");\r\n      setBotCard(\"\");\r\n      setCounter(0);\r\n      setRoundNum(roundNum + 1);\r\n      setMessage(\"You won round \" + roundNum);\r\n    }\r\n\r\n    if (botScore === 3) {\r\n      setMessage(\"Bot Won. Play again?\");\r\n      setPlayerScore(0);\r\n      setBotScore(0);\r\n      setCard(\"\");\r\n      setBotCard(\"\");\r\n      setCounter(0);\r\n      setRoundNum(1);\r\n    } else if (playerScore === 3) {\r\n      setMessage(\"You Won. Play again?\");\r\n      setPlayerScore(0);\r\n      setBotScore(0);\r\n      setCard(\"\");\r\n      setBotCard(\"\");\r\n      setCounter(0);\r\n      setRoundNum(1);\r\n    }\r\n  };\r\n\r\n  const cards = [\"rock\", \"paper\", \"scissors\"];\r\n\r\n  const setBotCardF = () => {\r\n    const pickedCard = cards[Math.floor(Math.random() * 3)];\r\n    setBotCard(pickedCard);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (card !== botCard) {\r\n      setTimeout(() => {\r\n        setWinner(card, botCard);\r\n      }, 500);\r\n    } else if (card && botCard && card === botCard) {\r\n      setTimeout(() => {\r\n        setCard(\"\");\r\n        setBotCard(\"\");\r\n        setCounter(0);\r\n        setRoundNum(roundNum + 1);\r\n        setMessage(\"Same cards! Try again.\");\r\n      }, 500);\r\n    }\r\n    return () => {\r\n      // cleanup;\r\n    };\r\n  }, [card, botCard, roundNum]);\r\n\r\n  return (\r\n    <>\r\n      <main className=\"game-container\">\r\n        <div className=\"round-container\">\r\n          <h1 className=\"roundText\">Round {roundNum}</h1>\r\n        </div>\r\n        <Score score1={playerScore} score2={botScore} />\r\n        <div className=\"player-box\">\r\n          <h2>Player 1</h2>\r\n          <h2>Bot</h2>\r\n        </div>\r\n        <div className=\"message\">\r\n          <h2>{message}</h2>\r\n        </div>\r\n        <GameScene\r\n          setBotCardF={setBotCardF}\r\n          counter={counter}\r\n          onClick={onClick}\r\n          card={card}\r\n          botCard={botCard}\r\n          clearAll={clearAll}\r\n          message={message}\r\n        />\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./components\";\nimport { Scene } from \"./sections\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Scene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}